buildscript {
    ext {
        springBootVersion = '2.2.8.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
        classpath 'com.adarshr:gradle-test-logger-plugin:2.1.0'
    }



}


wrapper{
    gradleVersion = '6.5.1'
    distributionType = Wrapper.DistributionType.BIN
}

allprojects {
    group 'com.olympus'
    version '1.0-SNAPSHOT'
}

subprojects {


    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'idea'


    //Jar compiled version..
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenCentral()
    }


    dependencies {

        compile group: 'joda-time', name: 'joda-time', version: '2.10.6'
        compile "org.codehaus.groovy:groovy-all:2.4.17"
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompile group: 'org.testng', name: 'testng', version: '7.1.0'

        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    test {
        useJUnitPlatform()
        useTestNG(){
            useDefaultListeners = true
        }

        failFast = true

        maxParallelForks = Runtime.getRuntime().availableProcessors()


        testLogging {
            showStandardStreams = true
        }
    }

    compileJava {
        //raise heap
        options.fork = 'true'
        options.forkOptions.with {
            memoryMaximumSize = '8192m'
        }
    }



}